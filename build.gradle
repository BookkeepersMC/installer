plugins {
	id 'java'
	id 'maven-publish'
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "org.cadixdev.licenser" version "0.6.1"
	id "de.undercouch.download" version "4.1.2"
}

sourceCompatibility = 1.8
version = '1.0.0'
archivesBaseName = "notebook-installer"

def ENV = System.getenv()
version = version

repositories {
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
    mavenCentral()
}

def nativeLibVersion = "0.1.3"
def nativeLibDistributions = [
		"windows-ARM64", "windows-Win32", "windows-x64", "macos-x86_64_arm64"
]

dependencies {
	implementation ('org.sharegov:mjson:1.4.1') {
		transitive false
	}
	nativeLibDistributions.each {
		implementation "net.fabricmc.fabric-installer-native-lib:${it}:${nativeLibVersion}"
	}

	testImplementation 'junit:junit:4.13.2'
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}


shadowJar {
	manifest {
		attributes 'Implementation-Title': 'NotebookInstaller',
				'Implementation-Version': project.version,
				'Main-Class': 'net.fabricmc.installer.Main'
	}

	minimize()
	archiveClassifier.set(null)
	exclude('icon.ico')
}

task serverJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	manifest {
		attributes 'Implementation-Title': 'NotebookInstaller',
				'Implementation-Version': project.version,
				'Main-Class': 'net.fabricmc.installer.ServerLauncher'
	}

	minimize()
	exclude('icon.ico')
	exclude('*.png')
	exclude('natives/*')

	archiveClassifier = "server"
	from sourceSets.main.output
	configurations = [project.configurations.compileClasspath]
}
assemble.dependsOn serverJar

def bootstrapVersion = "0.5.2"
def bootstrapArch = "i686"

task downloadBootstrap(type: Download) {
	src "https://maven.fabricmc.net/net/fabricmc/fabric-installer-native-bootstrap/windows-${bootstrapArch}/${bootstrapVersion}/windows-${bootstrapArch}-${bootstrapVersion}.exe"
	dest project.buildDir
}

task nativeExe(dependsOn: [shadowJar, downloadBootstrap], type: FileOutput) {
	output = file("${projectDir}/build/libs/${archivesBaseName}-${project.version}.exe")
	outputs.upToDateWhen { false }

	doFirst {
		output.delete()
	}

	doLast {
		output.createNewFile()
		output.setBytes downloadBootstrap.outputFiles.first().readBytes()
		output.append shadowJar.archiveFile.get().getAsFile().readBytes()
	}
}
build.dependsOn nativeExe

jar {
	enabled = false
}

license {
	header rootProject.file("HEADER")
	include "**/*.java"
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId project.group
			artifactId project.archivesBaseName
			version project.version
			artifact (shadowJar) {
				classifier null
			}
			artifact nativeExe.output

			// No point in signing as it is designed to get modified
			artifact (serverJar) {
				classifier "server"
			}
		}
	}
	repositories {
		maven {
			if (ENV.MAVEN_URL) {
				url ENV.MAVEN_URL
			}
		}
	}
}

task checkVersion {
	doFirst {
		def xml = new URL("https://bookkeepersmc.github.io/m2/com/bookkeepersmc/notebook-installer/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion

class FileOutput extends DefaultTask {
	@OutputFile
	File output
}
